TITLE:: MidiCCBusAllocator
summary:: allocates a bus and map the bus value to a MIDI CC
related:: Classes/MIDIFunc, Classes/Bus, Classes/SimpleNumber#-lincurve
categories:: External Control>MIDI

DESCRIPTION::
This class is a tool to create a control-rate Bus and map the MIDI CC value to the bus value.
The CC value is mapped thanks to code::lincurve:: to the code::[minValue, maxValue]:: range with the given code::curve::.

Subsection:: Usage with Synth
code::
(
s.boot;
MIDIClient.init;
MIDIIn.connectAll;
)

// Map CC #21 to 50 -> 2000 with a slightly concave curve
b = MidiCCBusAllocator.new(s, 21, 50, 2000, 0.6);

// by default, the MidiCCBusAllocator does not survive Cmd-Period, set surviveCmdPeriod to true to circumvent this.
b = MidiCCBusAllocator.new(s, 21, 50, 2000, 0.6, true);


// Overwrite MIDI CC to the next incoming MIDI CC, it's time to turn a knob in your MIDI controller !
b.learnCC;

(
SynthDef(\sine, { |bus = 0, freq = 440|
	var sig;
	sig = SinOsc.ar(freq ! 2) * -20.dbamp;
	Out.ar(bus, sig);
}).add;
)

a = Synth(\sine);

// map the synth's freq parameter to MIDI CC in the 50 Hz -> 2000 Hz range
a.map(\freq, b);

// free when unused
b.free;
::

Subsection:: Usage with JITLib
code::
(
s.boot;
MIDIClient.init;
MIDIIn.connectAll;
)

// Map CC #21 to 50 -> 2000 with a slightly concave curve
b = MidiCCBusAllocator.new(s, 21, 50, 2000, 0.6);
b.learnCC
Ndef(\freq, b.bus);
Ndef(\sine, { SinOsc.ar(freq: Ndef(\freq).kr ! 2) * -20.dbamp; });
Ndef(\sine).play;
Ndef(\sine).stop;

Ndef(\saw, { |freq = 200| Saw.ar([freq, freq * 1.001]) * -20.dbamp });
Ndef(\saw).set(\freq, b.asMap);
Ndef(\saw).play;

Ndef.clear;
b.free;
::

Subsection:: Usage with Patterns
code::
(
s.boot;
MIDIClient.init;
MIDIIn.connectAll;
)

(
SynthDef(\saw, { |bus = 0, freq = 440, filterFreq = 2000|
    var sig;
	sig = LPF.ar(VarSaw.ar(freq ! 2), filterFreq) * Env.perc.ar(doneAction: Done.freeSelf) * -20.dbamp;
    Out.ar(bus, sig);
}).add;
)

// Map CC #21 to C4 -> C6 range for synth freq
b = MidiCCBusAllocator.new(s, 21, "C4".notemidi, "C6".notemidi);

// Map same CC #21 to 400 -> 4000 Hz range for filter freq
c = MidiCCBusAllocator.new(s, 21, 400, 4000, 4);

(
p = Pdef(\pattern, Pbind(*[
    instrument: \saw,
    midinote: b.value.round, // use b.value because we need the value on sclang side
    filterFreq: c.asMap, // use c.asMap because we can directly link the filter value to the underlying Synth
    dur: 1/4
])).play;
)
::

CLASSMETHODS::

METHOD:: new
create a MidiCCBusAllocator instance.

ARGUMENT:: server
The SC server.

ARGUMENT:: ccNumber
The MIDI CC control you want to map to the bus. Default value is CC 0.

ARGUMENT:: minValue
The minimum value that will be mapped to the CC value. Default value is 0.0.

ARGUMENT:: maxValue
The maximum value that will be mapped to the CC value. Default value is 0.0.

ARGUMENT:: curve
The curve used to map the MIDI CC value to the [minValue, maxValue] range. Default value is 0.0 (linear).
See link::Classes/SimpleNumber#-lincurve::.

ARGUMENT:: suriveCmdPeriod
Set it to true if you want the MidiCCBusAllocator to survive Cmd-Period (false by default)

INSTANCEMETHODS::

PRIVATE:: init, registerMidiFunc

METHOD:: learnCC
Will take the next CC received as the MIDI CC number.
The MIDI CC number will be displayed in the post window.

METHOD:: value
Get the current value (i.e. the mapped value of the CC controller in [minValue, maxValue] range).
Usefull to use this value on the client (sclang) side.

METHOD:: bus
Get the link::Classes/Bus:: where the MIDI CC values are written to.

METHOD:: ccNumber
Get / set the MIDI CC number.

METHOD:: minValue
Get / set the minimum value that will be output to the bus.

METHOD:: maxValue
Get / set the maximum value that will be output to the bus.

METHOD:: curve
Get / set the curve used to map the MIDI CC value to the [minValue, maxValue] range. See link::Classes/SimpleNumber#-lincurve::.

METHOD:: asBus
Allows the MidiCCBusAllocator to be mapped directly to a Synth parameter.

METHOD:: asMap
Allows the MidiCCBusAllocator to be mapped to a NodeProxy parameter.

METHOD:: free
Free the MidiCCBusAllocator resources and stop listening to MIDI CC.

METHOD:: surviveCmdPeriod
Sets if the MidiCCBusAllocator survives press of cmd + period